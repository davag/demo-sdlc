# Task ID: 8
# Title: Implement Accessibility and Final Testing
# Status: pending
# Dependencies: 7
# Priority: low
# Description: Ensure the application meets accessibility standards, implement keyboard navigation, and perform final testing.
# Details:
1. Create a keyboard shortcuts utility at `/src/utils/keyboardShortcuts.ts`:
```typescript
import { useEffect } from 'react';

type ShortcutHandler = (event: KeyboardEvent) => void;

interface ShortcutMap {
  [key: string]: ShortcutHandler;
}

export function useKeyboardShortcuts(shortcuts: ShortcutMap) {
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      // Don't trigger shortcuts when typing in input fields
      if (['INPUT', 'TEXTAREA', 'SELECT'].includes((event.target as HTMLElement).tagName)) {
        return;
      }
      
      // Create key identifier (e.g., 'ctrl+n')
      const key = [
        event.ctrlKey ? 'ctrl' : '',
        event.altKey ? 'alt' : '',
        event.shiftKey ? 'shift' : '',
        event.key.toLowerCase()
      ].filter(Boolean).join('+');
      
      if (shortcuts[key]) {
        event.preventDefault();
        shortcuts[key](event);
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [shortcuts]);
}
```

2. Update the TasksPage component to implement keyboard shortcuts:
```typescript
import React, { useState } from 'react';
import FilterBar from '../components/FilterBar';
import TaskList from '../components/TaskList';
import TaskForm from '../components/TaskForm';
import { useKeyboardShortcuts } from '../utils/keyboardShortcuts';

const TasksPage: React.FC = () => {
  const [isAddingTask, setIsAddingTask] = useState(false);
  
  const handleAddComplete = () => {
    setIsAddingTask(false);
  };
  
  // Implement keyboard shortcuts
  useKeyboardShortcuts({
    'n': () => setIsAddingTask(true),
    'escape': () => setIsAddingTask(false),
  });
  
  return (
    <div className="container mx-auto px-4 py-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">My Tasks</h2>
        <div>
          <button
            onClick={() => setIsAddingTask(!isAddingTask)}
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
            aria-label={isAddingTask ? 'Cancel adding task' : 'Add new task'}
          >
            {isAddingTask ? 'Cancel' : 'Add Task'}
          </button>
          <div className="text-xs text-gray-500 mt-1">Press 'N' to add a new task</div>
        </div>
      </div>
      
      {isAddingTask && (
        <div className="mb-6">
          <TaskForm onComplete={handleAddComplete} />
        </div>
      )}
      
      <FilterBar />
      <TaskList />
    </div>
  );
};

export default TasksPage;
```

3. Create a utility for focus management at `/src/utils/focusManagement.ts`:
```typescript
import { useRef, useEffect } from 'react';

export function useTrapFocus(isActive: boolean) {
  const containerRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    if (!isActive || !containerRef.current) return;
    
    const container = containerRef.current;
    const focusableElements = container.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    
    if (focusableElements.length === 0) return;
    
    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
    
    // Focus the first element when the container becomes active
    firstElement.focus();
    
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      
      // Trap focus within the container
      if (e.shiftKey && document.activeElement === firstElement) {
        e.preventDefault();
        lastElement.focus();
      } else if (!e.shiftKey && document.activeElement === lastElement) {
        e.preventDefault();
        firstElement.focus();
      }
    };
    
    container.addEventListener('keydown', handleKeyDown);
    return () => container.removeEventListener('keydown', handleKeyDown);
  }, [isActive]);
  
  return containerRef;
}
```

4. Update the TaskForm to use focus trapping:
```typescript
import React, { useState, useEffect } from 'react';
import { Task } from '../types';
import useTaskStore from '../store/taskStore';
import { useTrapFocus } from '../utils/focusManagement';

interface TaskFormProps {
  existingTask?: Task;
  onComplete?: () => void;
}

const TaskForm: React.FC<TaskFormProps> = ({ existingTask, onComplete }) => {
  // ... existing code ...
  
  // Add focus trapping
  const formRef = useTrapFocus(true);
  
  return (
    <form 
      ref={formRef}
      onSubmit={handleSubmit} 
      className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border dark:border-gray-700"
    >
      {/* ... existing form content ... */}
    </form>
  );
};

export default TaskForm;
```

5. Create a final accessibility check utility at `/src/utils/a11yCheck.ts`:
```typescript
// This is a development utility to help identify accessibility issues
export function checkAccessibility() {
  if (process.env.NODE_ENV !== 'production') {
    const checkForAriaLabels = () => {
      const interactiveElements = document.querySelectorAll('button, a, [role="button"]');
      interactiveElements.forEach(el => {
        if (!el.getAttribute('aria-label') && !el.textContent?.trim()) {
          console.warn('Interactive element missing aria-label:', el);
        }
      });
    };
    
    const checkForAltText = () => {
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (!img.getAttribute('alt')) {
          console.warn('Image missing alt text:', img);
        }
      });
    };
    
    // Run checks after initial render
    setTimeout(() => {
      checkForAriaLabels();
      checkForAltText();
      console.info('Accessibility check complete. See warnings above if any issues were found.');
    }, 1000);
  }
}
```

# Test Strategy:
Create comprehensive tests for accessibility using Vitest, React Testing Library, and axe-core for automated accessibility testing. Test keyboard navigation by simulating keyboard events and verifying that focus moves correctly between elements. Test screen reader compatibility by checking that all interactive elements have proper ARIA attributes. Test color contrast to ensure it meets WCAG standards. Verify that the application works correctly with keyboard-only navigation. Test the keyboard shortcuts to ensure they work as expected and don't conflict with browser shortcuts.
