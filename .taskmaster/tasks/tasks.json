{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and Configuration",
        "description": "Initialize the React project with TypeScript, Vite, Tailwind CSS, and configure ESLint according to the technical requirements.",
        "details": "1. Create a new Vite project with React and TypeScript template:\n```bash\nnpm create vite@latest task-management-app --template react-ts\ncd task-management-app\n```\n\n2. Install required dependencies:\n```bash\nnpm install zustand react-router-dom lucide-react\nnpm install -D tailwindcss postcss autoprefixer vitest @testing-library/react @testing-library/jest-dom\n```\n\n3. Initialize Tailwind CSS:\n```bash\nnpx tailwindcss init -p\n```\n\n4. Configure Tailwind CSS in tailwind.config.js:\n```javascript\nmodule.exports = {\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  darkMode: 'class',\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n5. Set up ESLint for TypeScript:\n```bash\nnpm install -D eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-plugin-react eslint-plugin-react-hooks\n```\n\n6. Create the required folder structure:\n```\n/src\n  /components\n  /pages\n  /hooks\n  /store\n  /types\n  /utils\n```\n\n7. Configure tsconfig.json for strict mode and other TypeScript settings.\n<info added on 2025-06-19T10:22:42.806Z>\n✅ COMPLETED SETUP:\n- ✅ Installed all required dependencies: zustand, react-router-dom, lucide-react\n- ✅ Installed dev dependencies: tailwindcss, postcss, autoprefixer, vitest, @testing-library/react, @testing-library/jest-dom, @tailwindcss/postcss\n- ✅ Created Tailwind CSS configuration (tailwind.config.js) with dark mode support and proper content paths\n- ✅ Created PostCSS configuration (postcss.config.js) with @tailwindcss/postcss plugin\n- ✅ Created Vite configuration (vite.config.ts) with React plugin and test setup\n- ✅ Created TypeScript configuration (tsconfig.json) with strict mode enabled\n- ✅ Created TypeScript Node configuration (tsconfig.node.json) for build tools\n- ✅ Created ESLint configuration (.eslintrc.cjs) with TypeScript and React rules\n- ✅ Created main HTML file (index.html) with proper metadata\n- ✅ Created main CSS file (src/index.css) with Tailwind directives and dark mode styling\n- ✅ Created React app entry point (src/main.tsx) with React 18 createRoot API\n- ✅ Created basic App component (src/App.tsx) with welcome message\n- ✅ Created test setup file (src/test/setup.ts) for Jest DOM matchers\n- ✅ Created all required folder structure: /components, /pages, /hooks, /store, /types, /utils, /test\n- ✅ Project builds successfully with `npm run build` (no TypeScript errors)\n- ✅ ESLint runs successfully with `npm run lint` (no linting errors)\n- ✅ Vitest is properly configured and ready for testing (jsdom installed automatically)\n- ✅ All configurations follow cursor rules and requirements from PRD\n\nThe project is now ready for Task #2: Define TypeScript Interfaces and Data Models.\n</info added on 2025-06-19T10:22:42.806Z>",
        "testStrategy": "Verify that the project builds successfully with no errors. Run `npm run dev` to ensure the development server starts correctly. Check that ESLint is properly configured by running `npm run lint` (after setting up the lint script in package.json). Verify that all required directories are created and accessible.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Define TypeScript Interfaces and Data Models",
        "description": "Create TypeScript interfaces for the Task and FilterState data models as specified in the PRD.",
        "details": "Create a file at `/src/types/index.ts` with the following content:\n\n```typescript\nexport interface Task {\n  id: string;\n  title: string;\n  description: string;\n  priority: 'high' | 'medium' | 'low';\n  status: 'todo' | 'in-progress' | 'completed';\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface FilterState {\n  priority: 'all' | 'high' | 'medium' | 'low';\n  status: 'all' | 'todo' | 'in-progress' | 'completed';\n}\n\n// Theme type\nexport type Theme = 'light' | 'dark';\n\n// Color mapping for priority levels\nexport const PRIORITY_COLORS = {\n  high: 'text-red-500',\n  medium: 'text-yellow-500',\n  low: 'text-green-500'\n};\n\n// Status display names\nexport const STATUS_LABELS = {\n  'todo': 'To Do',\n  'in-progress': 'In Progress',\n  'completed': 'Completed'\n};\n```\n<info added on 2025-06-19T12:58:32.158Z>\nI've implemented the TypeScript interfaces and data models as specified in the PRD. The file has been created at `/src/types/index.ts` and includes all required interfaces and constants:\n\n- Task interface with all required properties (id, title, description, priority, status, timestamps)\n- FilterState interface for the filtering system\n- Theme type for theme switching\n- PRIORITY_COLORS constant for consistent visual styling\n- STATUS_LABELS constant for user-friendly display\n\nAdditionally, I've added:\n- PRIORITY_OPTIONS and STATUS_OPTIONS constants for dropdown/select options\n- Comprehensive JSDoc documentation\n- Type safety with `as const` assertions\n\nAll TypeScript compilation checks pass without errors, and the code is ready for use in the upcoming Zustand store implementation (Task #3).\n</info added on 2025-06-19T12:58:32.158Z>",
        "testStrategy": "Create unit tests using Vitest to verify that the TypeScript interfaces are correctly defined. Test that the type constraints work as expected by creating sample objects that conform to the interfaces and checking for TypeScript errors when invalid values are used.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Task and FilterState interfaces",
            "description": "Define the core Task and FilterState interfaces that will be used throughout the application for type safety and data structure consistency.",
            "dependencies": [],
            "details": "Create the `/src/types/index.ts` file and implement the Task interface with properties for id, title, description, priority, status, createdAt, and updatedAt. Then implement the FilterState interface with properties for priority and status filters. Ensure proper typing for all enum-like fields using union types.",
            "status": "done",
            "testStrategy": "Verify the interfaces by creating sample objects that conform to these interfaces and checking for TypeScript compilation errors."
          },
          {
            "id": 2,
            "title": "Define Theme type and implement theme-related utilities",
            "description": "Create the Theme type definition to support light and dark mode functionality in the application.",
            "dependencies": [],
            "details": "In the same `/src/types/index.ts` file, add the Theme type definition as a union type of 'light' and 'dark'. This will be used for theme switching functionality throughout the application.",
            "status": "done",
            "testStrategy": "Verify the Theme type by using it in a sample variable declaration and checking for TypeScript compilation errors."
          },
          {
            "id": 3,
            "title": "Implement PRIORITY_COLORS constant",
            "description": "Create a mapping between priority levels and their corresponding color classes for consistent styling across the application.",
            "dependencies": [],
            "details": "Add the PRIORITY_COLORS constant to the types file that maps each priority level ('high', 'medium', 'low') to its corresponding Tailwind CSS color class. This will ensure consistent color coding of priorities throughout the UI.",
            "status": "done",
            "testStrategy": "Verify that all priority levels from the Task interface have corresponding entries in the PRIORITY_COLORS object."
          },
          {
            "id": 4,
            "title": "Implement STATUS_LABELS constant",
            "description": "Create a mapping between status values and their human-readable display labels for consistent terminology in the UI.",
            "dependencies": [
              3
            ],
            "details": "Add the STATUS_LABELS constant to the types file that maps each status value ('todo', 'in-progress', 'completed') to its user-friendly display name. This will be used to display status values consistently throughout the application.",
            "status": "done",
            "testStrategy": "Verify that all status values from the Task interface have corresponding entries in the STATUS_LABELS object."
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Zustand Store for State Management",
        "description": "Create a Zustand store to manage tasks, filter state, and theme preferences with proper TypeScript typing.",
        "details": "Create a file at `/src/store/taskStore.ts` with the following content:\n\n```typescript\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { Task, FilterState, Theme } from '../types';\n\ninterface TaskState {\n  tasks: Task[];\n  filters: FilterState;\n  theme: Theme;\n  // Actions\n  addTask: (task: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>) => void;\n  updateTask: (id: string, updates: Partial<Omit<Task, 'id' | 'createdAt'>>) => void;\n  deleteTask: (id: string) => void;\n  setFilter: (filters: Partial<FilterState>) => void;\n  clearFilters: () => void;\n  toggleTheme: () => void;\n}\n\nconst useTaskStore = create<TaskState>(\n  persist(\n    (set) => ({\n      tasks: [],\n      filters: {\n        priority: 'all',\n        status: 'all',\n      },\n      theme: 'light',\n      \n      addTask: (taskData) => set((state) => {\n        const newTask: Task = {\n          ...taskData,\n          id: crypto.randomUUID(),\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n        return { tasks: [...state.tasks, newTask] };\n      }),\n      \n      updateTask: (id, updates) => set((state) => ({\n        tasks: state.tasks.map(task => \n          task.id === id \n            ? { ...task, ...updates, updatedAt: new Date() } \n            : task\n        )\n      })),\n      \n      deleteTask: (id) => set((state) => ({\n        tasks: state.tasks.filter(task => task.id !== id)\n      })),\n      \n      setFilter: (filterUpdates) => set((state) => ({\n        filters: { ...state.filters, ...filterUpdates }\n      })),\n      \n      clearFilters: () => set({\n        filters: { priority: 'all', status: 'all' }\n      }),\n      \n      toggleTheme: () => set((state) => ({\n        theme: state.theme === 'light' ? 'dark' : 'light'\n      })),\n    }),\n    {\n      name: 'task-storage',\n      partialize: (state) => ({ \n        tasks: state.tasks, \n        filters: state.filters,\n        theme: state.theme \n      }),\n    }\n  )\n);\n\nexport default useTaskStore;\n```\n\nAlso create a utility hook for filtered tasks at `/src/hooks/useFilteredTasks.ts`:\n\n```typescript\nimport { useMemo } from 'react';\nimport useTaskStore from '../store/taskStore';\n\nconst useFilteredTasks = () => {\n  const { tasks, filters } = useTaskStore();\n  \n  const filteredTasks = useMemo(() => {\n    return tasks.filter(task => {\n      // Filter by priority\n      if (filters.priority !== 'all' && task.priority !== filters.priority) {\n        return false;\n      }\n      \n      // Filter by status\n      if (filters.status !== 'all' && task.status !== filters.status) {\n        return false;\n      }\n      \n      return true;\n    });\n  }, [tasks, filters]);\n  \n  return filteredTasks;\n};\n\nexport default useFilteredTasks;\n```",
        "testStrategy": "Create unit tests for the Zustand store using Vitest. Test each action (addTask, updateTask, deleteTask, setFilter, clearFilters, toggleTheme) to ensure they modify the state correctly. Verify that the persist middleware correctly saves and loads state from localStorage. Test the useFilteredTasks hook with various filter combinations to ensure it returns the expected filtered task list.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Create Core UI Components",
        "description": "Develop the core UI components including TaskItem, TaskList, TaskForm, and FilterBar with proper TypeScript typing and Tailwind CSS styling.",
        "details": "Create the following components:\n\n1. TaskItem component at `/src/components/TaskItem.tsx`:\n```typescript\nimport React from 'react';\nimport { Task, PRIORITY_COLORS, STATUS_LABELS } from '../types';\nimport { Edit, Trash2, CheckCircle, Circle } from 'lucide-react';\nimport useTaskStore from '../store/taskStore';\n\ninterface TaskItemProps {\n  task: Task;\n  onEdit: (task: Task) => void;\n}\n\nconst TaskItem: React.FC<TaskItemProps> = ({ task, onEdit }) => {\n  const { updateTask, deleteTask } = useTaskStore();\n  \n  const handleStatusToggle = () => {\n    updateTask(task.id, {\n      status: task.status === 'completed' ? 'todo' : 'completed'\n    });\n  };\n  \n  const handleDelete = () => {\n    if (confirm('Are you sure you want to delete this task?')) {\n      deleteTask(task.id);\n    }\n  };\n  \n  return (\n    <div className=\"p-4 mb-3 border rounded-lg shadow-sm hover:shadow-md transition-shadow bg-white dark:bg-gray-800 dark:border-gray-700\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-start space-x-3\">\n          <button \n            onClick={handleStatusToggle}\n            className=\"mt-1 text-gray-500 hover:text-blue-500 transition-colors\"\n            aria-label={task.status === 'completed' ? 'Mark as incomplete' : 'Mark as complete'}\n          >\n            {task.status === 'completed' ? \n              <CheckCircle className=\"h-5 w-5 text-green-500\" /> : \n              <Circle className=\"h-5 w-5\" />}\n          </button>\n          \n          <div className=\"flex-1\">\n            <h3 className={`font-medium ${task.status === 'completed' ? 'line-through text-gray-500' : ''}`}>\n              {task.title}\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">{task.description}</p>\n            <div className=\"flex items-center mt-2 space-x-2\">\n              <span className={`text-xs px-2 py-1 rounded-full ${PRIORITY_COLORS[task.priority]} bg-opacity-10`}>\n                {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}\n              </span>\n              <span className=\"text-xs px-2 py-1 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300\">\n                {STATUS_LABELS[task.status]}\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <button \n            onClick={() => onEdit(task)}\n            className=\"text-gray-500 hover:text-blue-500 transition-colors\"\n            aria-label=\"Edit task\"\n          >\n            <Edit className=\"h-4 w-4\" />\n          </button>\n          <button \n            onClick={handleDelete}\n            className=\"text-gray-500 hover:text-red-500 transition-colors\"\n            aria-label=\"Delete task\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskItem;\n```\n\n2. TaskList component at `/src/components/TaskList.tsx`:\n```typescript\nimport React, { useState } from 'react';\nimport TaskItem from './TaskItem';\nimport TaskForm from './TaskForm';\nimport useFilteredTasks from '../hooks/useFilteredTasks';\nimport { Task } from '../types';\n\nconst TaskList: React.FC = () => {\n  const filteredTasks = useFilteredTasks();\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  \n  const handleEdit = (task: Task) => {\n    setEditingTask(task);\n  };\n  \n  const handleEditComplete = () => {\n    setEditingTask(null);\n  };\n  \n  return (\n    <div className=\"mt-6\">\n      {editingTask && (\n        <div className=\"mb-6\">\n          <h2 className=\"text-lg font-medium mb-2\">Edit Task</h2>\n          <TaskForm \n            existingTask={editingTask} \n            onComplete={handleEditComplete} \n          />\n        </div>\n      )}\n      \n      {filteredTasks.length === 0 ? (\n        <div className=\"text-center py-10 text-gray-500 dark:text-gray-400\">\n          <p>No tasks found with the current filters.</p>\n        </div>\n      ) : (\n        filteredTasks.map(task => (\n          <TaskItem \n            key={task.id} \n            task={task} \n            onEdit={handleEdit} \n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default TaskList;\n```\n\n3. TaskForm component at `/src/components/TaskForm.tsx`:\n```typescript\nimport React, { useState, useEffect } from 'react';\nimport { Task } from '../types';\nimport useTaskStore from '../store/taskStore';\n\ninterface TaskFormProps {\n  existingTask?: Task;\n  onComplete?: () => void;\n}\n\nconst TaskForm: React.FC<TaskFormProps> = ({ existingTask, onComplete }) => {\n  const { addTask, updateTask } = useTaskStore();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [priority, setPriority] = useState<'high' | 'medium' | 'low'>('medium');\n  const [status, setStatus] = useState<'todo' | 'in-progress' | 'completed'>('todo');\n  const [error, setError] = useState('');\n  \n  useEffect(() => {\n    if (existingTask) {\n      setTitle(existingTask.title);\n      setDescription(existingTask.description);\n      setPriority(existingTask.priority);\n      setStatus(existingTask.status);\n    }\n  }, [existingTask]);\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    \n    if (!title.trim()) {\n      setError('Title is required');\n      return;\n    }\n    \n    try {\n      if (existingTask) {\n        updateTask(existingTask.id, {\n          title,\n          description,\n          priority,\n          status\n        });\n      } else {\n        addTask({\n          title,\n          description,\n          priority,\n          status\n        });\n        // Reset form after adding\n        setTitle('');\n        setDescription('');\n        setPriority('medium');\n        setStatus('todo');\n      }\n      \n      if (onComplete) {\n        onComplete();\n      }\n    } catch (err) {\n      setError('Failed to save task. Please try again.');\n      console.error(err);\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border dark:border-gray-700\">\n      {error && (\n        <div className=\"mb-4 p-2 bg-red-100 text-red-700 rounded-md text-sm\">\n          {error}\n        </div>\n      )}\n      \n      <div className=\"mb-4\">\n        <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Title *\n        </label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n          placeholder=\"Task title\"\n          required\n        />\n      </div>\n      \n      <div className=\"mb-4\">\n        <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Description\n        </label>\n        <textarea\n          id=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n          placeholder=\"Task description\"\n          rows={3}\n        />\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n        <div>\n          <label htmlFor=\"priority\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n            Priority\n          </label>\n          <select\n            id=\"priority\"\n            value={priority}\n            onChange={(e) => setPriority(e.target.value as 'high' | 'medium' | 'low')}\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n          >\n            <option value=\"high\">High</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"low\">Low</option>\n          </select>\n        </div>\n        \n        <div>\n          <label htmlFor=\"status\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n            Status\n          </label>\n          <select\n            id=\"status\"\n            value={status}\n            onChange={(e) => setStatus(e.target.value as 'todo' | 'in-progress' | 'completed')}\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n          >\n            <option value=\"todo\">To Do</option>\n            <option value=\"in-progress\">In Progress</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"flex justify-end\">\n        <button\n          type=\"submit\"\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\"\n        >\n          {existingTask ? 'Update Task' : 'Add Task'}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default TaskForm;\n```\n\n4. FilterBar component at `/src/components/FilterBar.tsx`:\n```typescript\nimport React from 'react';\nimport useTaskStore from '../store/taskStore';\nimport { Filter, X } from 'lucide-react';\n\nconst FilterBar: React.FC = () => {\n  const { filters, setFilter, clearFilters } = useTaskStore();\n  \n  return (\n    <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border dark:border-gray-700 mb-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h2 className=\"text-lg font-medium flex items-center\">\n          <Filter className=\"h-5 w-5 mr-2\" />\n          Filters\n        </h2>\n        \n        <button\n          onClick={clearFilters}\n          className=\"text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 flex items-center\"\n          aria-label=\"Clear all filters\"\n        >\n          <X className=\"h-4 w-4 mr-1\" />\n          Clear\n        </button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label htmlFor=\"priorityFilter\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n            Priority\n          </label>\n          <select\n            id=\"priorityFilter\"\n            value={filters.priority}\n            onChange={(e) => setFilter({ priority: e.target.value as 'all' | 'high' | 'medium' | 'low' })}\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n          >\n            <option value=\"all\">All Priorities</option>\n            <option value=\"high\">High</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"low\">Low</option>\n          </select>\n        </div>\n        \n        <div>\n          <label htmlFor=\"statusFilter\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n            Status\n          </label>\n          <select\n            id=\"statusFilter\"\n            value={filters.status}\n            onChange={(e) => setFilter({ status: e.target.value as 'all' | 'todo' | 'in-progress' | 'completed' })}\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n          >\n            <option value=\"all\">All Statuses</option>\n            <option value=\"todo\">To Do</option>\n            <option value=\"in-progress\">In Progress</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterBar;\n```",
        "testStrategy": "Create unit tests for each component using Vitest and React Testing Library. Test rendering, user interactions (clicks, form submissions), and state changes. Verify that TaskItem correctly displays task information and handles status toggles and deletions. Test that TaskForm correctly handles both creation and editing modes. Verify that FilterBar correctly updates filter state. Test accessibility by checking for proper ARIA attributes and keyboard navigation.",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Theme Toggle and Header Components",
        "description": "Create the ThemeToggle component and Header component with dark/light theme support using Tailwind CSS.",
        "details": "1. Create ThemeToggle component at `/src/components/ThemeToggle.tsx`:\n```typescript\nimport React, { useEffect } from 'react';\nimport { Sun, Moon } from 'lucide-react';\nimport useTaskStore from '../store/taskStore';\n\nconst ThemeToggle: React.FC = () => {\n  const { theme, toggleTheme } = useTaskStore();\n  \n  // Apply theme class to document when theme changes\n  useEffect(() => {\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [theme]);\n  \n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"p-2 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors\"\n      aria-label={theme === 'dark' ? 'Switch to light theme' : 'Switch to dark theme'}\n    >\n      {theme === 'dark' ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n    </button>\n  );\n};\n\nexport default ThemeToggle;\n```\n\n2. Create Header component at `/src/components/Header.tsx`:\n```typescript\nimport React from 'react';\nimport { CheckSquare } from 'lucide-react';\nimport ThemeToggle from './ThemeToggle';\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b dark:border-gray-700 py-4\">\n      <div className=\"container mx-auto px-4 flex justify-between items-center\">\n        <div className=\"flex items-center space-x-2\">\n          <CheckSquare className=\"h-6 w-6 text-blue-500\" />\n          <h1 className=\"text-xl font-bold text-gray-800 dark:text-white\">Task Manager</h1>\n        </div>\n        \n        <ThemeToggle />\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n```\n\n3. Update the main CSS file at `/src/index.css` to support dark mode:\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  color-scheme: light dark;\n}\n\nbody {\n  @apply bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100;\n  min-height: 100vh;\n}\n```",
        "testStrategy": "Create unit tests for the ThemeToggle and Header components using Vitest and React Testing Library. Test that ThemeToggle correctly toggles the theme state in the store and applies the appropriate class to the document element. Verify that the Header component renders correctly with the app title and ThemeToggle component. Test accessibility by checking for proper ARIA attributes and keyboard navigation.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create Main Page Layout and Routing",
        "description": "Implement the main page layout and set up React Router for navigation.",
        "details": "1. Create the main page component at `/src/pages/TasksPage.tsx`:\n```typescript\nimport React, { useState } from 'react';\nimport FilterBar from '../components/FilterBar';\nimport TaskList from '../components/TaskList';\nimport TaskForm from '../components/TaskForm';\n\nconst TasksPage: React.FC = () => {\n  const [isAddingTask, setIsAddingTask] = useState(false);\n  \n  const handleAddComplete = () => {\n    setIsAddingTask(false);\n  };\n  \n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold\">My Tasks</h2>\n        <button\n          onClick={() => setIsAddingTask(!isAddingTask)}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\"\n        >\n          {isAddingTask ? 'Cancel' : 'Add Task'}\n        </button>\n      </div>\n      \n      {isAddingTask && (\n        <div className=\"mb-6\">\n          <TaskForm onComplete={handleAddComplete} />\n        </div>\n      )}\n      \n      <FilterBar />\n      <TaskList />\n    </div>\n  );\n};\n\nexport default TasksPage;\n```\n\n2. Create the App component with routing at `/src/App.tsx`:\n```typescript\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport TasksPage from './pages/TasksPage';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"flex flex-col min-h-screen\">\n        <Header />\n        <main className=\"flex-grow\">\n          <Routes>\n            <Route path=\"/\" element={<TasksPage />} />\n            {/* Add more routes here as needed */}\n          </Routes>\n        </main>\n        <footer className=\"py-4 text-center text-sm text-gray-500 dark:text-gray-400 border-t dark:border-gray-700\">\n          <div className=\"container mx-auto px-4\">\n            Task Management App &copy; {new Date().getFullYear()}\n          </div>\n        </footer>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n```\n\n3. Update the main entry file at `/src/main.tsx`:\n```typescript\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```",
        "testStrategy": "Create integration tests using Vitest and React Testing Library to verify that the TasksPage component renders correctly with all its child components. Test the routing functionality by checking that the correct components are rendered for each route. Verify that the Add Task button correctly toggles the TaskForm visibility. Test the overall layout and responsiveness by checking that the components are properly arranged and styled.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Error Handling and Loading States",
        "description": "Add error boundaries, loading states, and proper error handling for async operations.",
        "details": "1. Create an ErrorBoundary component at `/src/components/ErrorBoundary.tsx`:\n```typescript\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    console.error('Error caught by ErrorBoundary:', error, errorInfo);\n  }\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n      \n      return (\n        <div className=\"p-4 m-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg text-center\">\n          <h2 className=\"text-lg font-medium text-red-800 dark:text-red-400 mb-2\">Something went wrong</h2>\n          <p className=\"text-sm text-red-600 dark:text-red-300\">\n            {this.state.error?.message || 'An unexpected error occurred'}\n          </p>\n          <button\n            onClick={() => window.location.reload()}\n            className=\"mt-3 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors\"\n          >\n            Reload Page\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n```\n\n2. Create a LoadingSpinner component at `/src/components/LoadingSpinner.tsx`:\n```typescript\nimport React from 'react';\n\ninterface LoadingSpinnerProps {\n  size?: 'small' | 'medium' | 'large';\n  message?: string;\n}\n\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \n  size = 'medium', \n  message = 'Loading...' \n}) => {\n  const sizeClasses = {\n    small: 'h-4 w-4 border-2',\n    medium: 'h-8 w-8 border-3',\n    large: 'h-12 w-12 border-4'\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center p-4\">\n      <div \n        className={`${sizeClasses[size]} rounded-full border-gray-300 border-t-blue-500 animate-spin`}\n        role=\"status\"\n        aria-label=\"Loading\"\n      />\n      {message && (\n        <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">{message}</p>\n      )}\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n```\n\n3. Update the App component to use ErrorBoundary:\n```typescript\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport TasksPage from './pages/TasksPage';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nconst App: React.FC = () => {\n  return (\n    <ErrorBoundary>\n      <Router>\n        <div className=\"flex flex-col min-h-screen\">\n          <Header />\n          <main className=\"flex-grow\">\n            <Routes>\n              <Route path=\"/\" element={<TasksPage />} />\n              {/* Add more routes here as needed */}\n            </Routes>\n          </main>\n          <footer className=\"py-4 text-center text-sm text-gray-500 dark:text-gray-400 border-t dark:border-gray-700\">\n            <div className=\"container mx-auto px-4\">\n              Task Management App &copy; {new Date().getFullYear()}\n            </div>\n          </footer>\n        </div>\n      </Router>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;\n```\n\n4. Create a custom hook for handling async operations at `/src/hooks/useAsync.ts`:\n```typescript\nimport { useState, useCallback } from 'react';\n\ninterface AsyncState<T> {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype AsyncFunction<T> = (...args: any[]) => Promise<T>;\n\nexport function useAsync<T>(asyncFunction: AsyncFunction<T>, immediate = false) {\n  const [state, setState] = useState<AsyncState<T>>({\n    data: null,\n    loading: immediate,\n    error: null,\n  });\n\n  const execute = useCallback(\n    async (...args: any[]) => {\n      setState({ data: null, loading: true, error: null });\n      try {\n        const data = await asyncFunction(...args);\n        setState({ data, loading: false, error: null });\n        return data;\n      } catch (error) {\n        setState({ data: null, loading: false, error: error as Error });\n        throw error;\n      }\n    },\n    [asyncFunction]\n  );\n\n  return { ...state, execute };\n}\n```",
        "testStrategy": "Create unit tests for the ErrorBoundary and LoadingSpinner components using Vitest and React Testing Library. Test that ErrorBoundary correctly catches and displays errors. Create a test component that throws an error and verify that the ErrorBoundary renders the fallback UI. Test the LoadingSpinner component with different sizes and messages. Test the useAsync hook with both successful and failing async operations to ensure it correctly manages loading states and error handling.",
        "priority": "low",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Accessibility and Final Testing",
        "description": "Ensure the application meets accessibility standards, implement keyboard navigation, and perform final testing.",
        "details": "1. Create a keyboard shortcuts utility at `/src/utils/keyboardShortcuts.ts`:\n```typescript\nimport { useEffect } from 'react';\n\ntype ShortcutHandler = (event: KeyboardEvent) => void;\n\ninterface ShortcutMap {\n  [key: string]: ShortcutHandler;\n}\n\nexport function useKeyboardShortcuts(shortcuts: ShortcutMap) {\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Don't trigger shortcuts when typing in input fields\n      if (['INPUT', 'TEXTAREA', 'SELECT'].includes((event.target as HTMLElement).tagName)) {\n        return;\n      }\n      \n      // Create key identifier (e.g., 'ctrl+n')\n      const key = [\n        event.ctrlKey ? 'ctrl' : '',\n        event.altKey ? 'alt' : '',\n        event.shiftKey ? 'shift' : '',\n        event.key.toLowerCase()\n      ].filter(Boolean).join('+');\n      \n      if (shortcuts[key]) {\n        event.preventDefault();\n        shortcuts[key](event);\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [shortcuts]);\n}\n```\n\n2. Update the TasksPage component to implement keyboard shortcuts:\n```typescript\nimport React, { useState } from 'react';\nimport FilterBar from '../components/FilterBar';\nimport TaskList from '../components/TaskList';\nimport TaskForm from '../components/TaskForm';\nimport { useKeyboardShortcuts } from '../utils/keyboardShortcuts';\n\nconst TasksPage: React.FC = () => {\n  const [isAddingTask, setIsAddingTask] = useState(false);\n  \n  const handleAddComplete = () => {\n    setIsAddingTask(false);\n  };\n  \n  // Implement keyboard shortcuts\n  useKeyboardShortcuts({\n    'n': () => setIsAddingTask(true),\n    'escape': () => setIsAddingTask(false),\n  });\n  \n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold\">My Tasks</h2>\n        <div>\n          <button\n            onClick={() => setIsAddingTask(!isAddingTask)}\n            className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\"\n            aria-label={isAddingTask ? 'Cancel adding task' : 'Add new task'}\n          >\n            {isAddingTask ? 'Cancel' : 'Add Task'}\n          </button>\n          <div className=\"text-xs text-gray-500 mt-1\">Press 'N' to add a new task</div>\n        </div>\n      </div>\n      \n      {isAddingTask && (\n        <div className=\"mb-6\">\n          <TaskForm onComplete={handleAddComplete} />\n        </div>\n      )}\n      \n      <FilterBar />\n      <TaskList />\n    </div>\n  );\n};\n\nexport default TasksPage;\n```\n\n3. Create a utility for focus management at `/src/utils/focusManagement.ts`:\n```typescript\nimport { useRef, useEffect } from 'react';\n\nexport function useTrapFocus(isActive: boolean) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    if (!isActive || !containerRef.current) return;\n    \n    const container = containerRef.current;\n    const focusableElements = container.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    if (focusableElements.length === 0) return;\n    \n    const firstElement = focusableElements[0] as HTMLElement;\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n    \n    // Focus the first element when the container becomes active\n    firstElement.focus();\n    \n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n      \n      // Trap focus within the container\n      if (e.shiftKey && document.activeElement === firstElement) {\n        e.preventDefault();\n        lastElement.focus();\n      } else if (!e.shiftKey && document.activeElement === lastElement) {\n        e.preventDefault();\n        firstElement.focus();\n      }\n    };\n    \n    container.addEventListener('keydown', handleKeyDown);\n    return () => container.removeEventListener('keydown', handleKeyDown);\n  }, [isActive]);\n  \n  return containerRef;\n}\n```\n\n4. Update the TaskForm to use focus trapping:\n```typescript\nimport React, { useState, useEffect } from 'react';\nimport { Task } from '../types';\nimport useTaskStore from '../store/taskStore';\nimport { useTrapFocus } from '../utils/focusManagement';\n\ninterface TaskFormProps {\n  existingTask?: Task;\n  onComplete?: () => void;\n}\n\nconst TaskForm: React.FC<TaskFormProps> = ({ existingTask, onComplete }) => {\n  // ... existing code ...\n  \n  // Add focus trapping\n  const formRef = useTrapFocus(true);\n  \n  return (\n    <form \n      ref={formRef}\n      onSubmit={handleSubmit} \n      className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm border dark:border-gray-700\"\n    >\n      {/* ... existing form content ... */}\n    </form>\n  );\n};\n\nexport default TaskForm;\n```\n\n5. Create a final accessibility check utility at `/src/utils/a11yCheck.ts`:\n```typescript\n// This is a development utility to help identify accessibility issues\nexport function checkAccessibility() {\n  if (process.env.NODE_ENV !== 'production') {\n    const checkForAriaLabels = () => {\n      const interactiveElements = document.querySelectorAll('button, a, [role=\"button\"]');\n      interactiveElements.forEach(el => {\n        if (!el.getAttribute('aria-label') && !el.textContent?.trim()) {\n          console.warn('Interactive element missing aria-label:', el);\n        }\n      });\n    };\n    \n    const checkForAltText = () => {\n      const images = document.querySelectorAll('img');\n      images.forEach(img => {\n        if (!img.getAttribute('alt')) {\n          console.warn('Image missing alt text:', img);\n        }\n      });\n    };\n    \n    // Run checks after initial render\n    setTimeout(() => {\n      checkForAriaLabels();\n      checkForAltText();\n      console.info('Accessibility check complete. See warnings above if any issues were found.');\n    }, 1000);\n  }\n}\n```",
        "testStrategy": "Create comprehensive tests for accessibility using Vitest, React Testing Library, and axe-core for automated accessibility testing. Test keyboard navigation by simulating keyboard events and verifying that focus moves correctly between elements. Test screen reader compatibility by checking that all interactive elements have proper ARIA attributes. Test color contrast to ensure it meets WCAG standards. Verify that the application works correctly with keyboard-only navigation. Test the keyboard shortcuts to ensure they work as expected and don't conflict with browser shortcuts.",
        "priority": "low",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-18T21:02:59.579Z",
      "updated": "2025-06-19T12:58:40.625Z",
      "description": "Tasks for master context"
    }
  }
}